services:
  postgres-db:
    image: postgres:17.2
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD} 
    ports: 
      - "5432:5432" 
    volumes: 
      - ./postgres:/var/lib/postgresql/data 
  backend: 
    build: . 
    restart: always 
    environment: 
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres-db:${DB_PORT}/${DB_NAME}?schema=public
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ACCESS_EXPIRATION_TIME: ${JWT_ACCESS_EXPIRATION_TIME}
      JWT_REFRESH_EXPIRATION_TIME: ${JWT_REFRESH_EXPIRATION_TIME}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_SECURE: ${EMAIL_SECURE}
      EMAIL_SERVICE: ${EMAIL_SERVICE}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      EMAIL_FROM_ADDRESS: ${EMAIL_FROM_ADDRESS}
      RESET_PASSWORD_URL: ${RESET_PASSWORD_URL}
      RESET_PASSWORD_TOKEN_EXPIRATION_MINUTES: ${RESET_PASSWORD_TOKEN_EXPIRATION_MINUTES}
  ports:
        - "3000:3000"
  depends_on: # Asegura que la base de datos esté lista antes de iniciar la aplicación Node.js
    - postgres-db
  volumes:
    #      - .:/app
    # Excluye node_modules del bind mount para evitar conflictos y usar las dependencias instaladas en el contenedor.
    - /app/node_modules
